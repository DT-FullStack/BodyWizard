@use "vars" as var
@use "colors" as color
@use "sass:map"
@use "sass:list"

@function maps($maps, $name)
  $nomatch: null
  @each $map in $maps
    @if map.has-key($map, $name)
      @return map.get($map, $name)
  @warn "#{$name} not found in given maps"
  @return $nomatch

@mixin width($name, $mod: false)
  $width: maps((var.$widths,var.$widths_vw),$name)
  @if $mod
    #{$mod}-width: $width
  @else 
    width: $width
@mixin fit-content($margin: false, $max: false, $min: false)
  width: max-content
  @if $max
    @include width($max, 'max')
  @else 
    max-width: 100%
  @if $min
    @include width($min, 'min')
  @if $margin
    margin: $margin

@function space($size)
  @if map.has-key(var.$spacings, $size) == false
    @error "'#{$size}' is not a valid value for $size. Valid values: #{map.keys(var.$spacings)}"
  @return map.get(var.$spacings, $size)

@mixin spacing($property, $size, $mod: false)
  $space: space($size)
  @if $mod == false
    #{$property}: $space
  @else if $mod == 'y'
    #{$property}-top: $space
    #{$property}-bottom: $space
  @else if $mod == 'x'
    #{$property}-left: $space
    #{$property}-right: $space
  @else 
    #{$property}-#{$mod}: $space

@mixin pad($size, $mod: false, $size2: null, $mod2: false, $size3: null, $mod3: false, $size4: null, $mod4: false)
  @include spacing('padding',$size, $mod)
  @if $size2
    @include spacing('padding', $size2, $mod2)
  @if $size3
    @include spacing('padding', $size3, $mod3)
  @if $size4
    @include spacing('padding', $size4, $mod4)
@mixin margin($size, $mod: false, $size2: null, $mod2: false, $size3: null, $mod3: false, $size4: null, $mod4: false)
  @include spacing('margin',$size, $mod)
  @if $size2
    @include spacing('margin', $size2, $mod2)
  @if $size3
    @include spacing('margin', $size3, $mod3)
  @if $size4
    @include spacing('margin', $size4, $mod4)
  
@mixin rounded($size)
  @if map.has-key(var.$roundedness, $size) == false
    @error "'#{$size}' is not a valid value for $size. Valid values: #{map.keys(var.$roundedness)}"
  border-radius: map.get(var.$roundedness, $size)

@mixin border($width,$color:'darkgray',$radius:'small', $shade:75)
  @if map.has-key(var.$border-widths, $width) == false
    @error "'#{$width}' is not a valid value for $width. Valid values: #{map.keys(var.$border-widths)}"
  @if not list.index(var.$box-colors, $color)
    @error "'#{$color}' is not a valid value for $color. Valid values: #{$box-colors}"
  border: map.get(var.$border-widths, $width) solid color.get($color, $shade, true)
  @include rounded($radius)

@mixin box($color: 'gray', $border:'small', $corners:'small', $opaque:true, $shade:'medium', $pad:['mini','y','small','x'])
  @if map.has-key(var.$box-shades, $shade) == false
    @error "'#{$shade}' is not a valid value for $shade. Valid values: #{map.keys(var.$box-shades)}"
  $box-shade: map.get(var.$box-shades, $shade)
  $bg-shade: list.nth($box-shade, 1)
  $border-shade: list.nth($box-shade, 2)
  @include border($border, $color, $corners, $shade:$border-shade)
  background-color: color.get($color, $bg-shade, $opaque)
  position: relative
  box-sizing: border-box
  @include pad($pad...)